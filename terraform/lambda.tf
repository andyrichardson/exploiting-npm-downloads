locals {
  lambda_name = "install_package_lambda"
}
# Create archive of lambda function for upload
data "archive_file" "lambda" {
  type        = "zip"
  source_file = "${path.module}/../handler.js"
  output_path = "${path.module}/.handler.zip"
}

# Create policy
data "aws_iam_policy_document" "lambda_policy" {
  statement {
    actions = ["sts:AssumeRole"]

    principals {
      type        = "Service"
      identifiers = ["lambda.amazonaws.com"]
    }
  }
}

# Store logs
resource "aws_cloudwatch_log_group" "example" {
  name              = "/aws/lambda/${local.lambda_name}"
  retention_in_days = 3
  tags = local.project_tags
}

data "aws_iam_policy_document" "lambda_logs_policy" {
  statement {
    actions = [
      "logs:CreateLogGroup",
      "logs:CreateLogStream",
      "logs:PutLogEvents"
    ]

    resources = [
      "arn:aws:logs:*:*:*"
    ]
  }
}

resource "aws_iam_policy" "lambda_logging_policy" {
  name        = "lambda_logging"
  path        = "/"
  description = "IAM policy for logging from a lambda"
  policy = data.aws_iam_policy_document.lambda_logs_policy.json
}

resource "aws_iam_role_policy_attachment" "lambda_logs" {
  role       = aws_iam_role.iam_for_lambda.name
  policy_arn = aws_iam_policy.lambda_logging_policy.arn
}

# Create role
resource "aws_iam_role" "iam_for_lambda" {
  name = "lambda_role"
  assume_role_policy = data.aws_iam_policy_document.lambda_policy.json
  tags = local.project_tags
}

# Create function
resource "aws_lambda_function" "install_package_lambda" {
  filename      = data.archive_file.lambda.output_path
  role          = aws_iam_role.iam_for_lambda.arn
  function_name = local.lambda_name
  handler       = "handler.handler"
  source_code_hash = data.archive_file.lambda.output_base64sha256
  timeout = 10
  runtime = "nodejs14.x"
  tags = local.project_tags
}